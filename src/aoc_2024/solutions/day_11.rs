use crate::utils;
use std::{collections::HashMap, mem, time::Instant};

fn split_if_even(num: usize) -> Option<(usize, usize)> {
    let s = num.to_string();
    if s.len() % 2 == 0 {
        let str = s.as_str();
        Some((
            str[..str.len() / 2].parse().unwrap(),
            str[str.len() / 2..].parse().unwrap(),
        ))
    } else {
        None
    }
}

// Stub generated by Elf
pub fn solve() {
    // elf splits the printed output at the first <space> and takes writes the first half as the solution
    let input = utils::file_to_string("2024", "11")
        .split_whitespace()
        .filter_map(|n| n.parse().ok())
        .collect::<Vec<usize>>();
    let mut time = Instant::now();
    let mut number_counts: HashMap<usize, usize> = HashMap::new();
    input.iter().for_each(|&stone| {
        number_counts
            .entry(stone)
            .and_modify(|v| *v += 1)
            .or_insert(1);
    });
    let p1 = part_one(&mut number_counts);
    println!("{:?} in {:?} for Part 1", p1, time.elapsed());
    time = Instant::now();
    let p2 = part_two(&mut number_counts);
    println!("{:?} in {:?} for Part 2", p2, time.elapsed());
}

fn part_one(counts: &mut HashMap<usize, usize>) -> usize {
    blink(25, counts)

}
fn part_two(prev: &mut HashMap<usize, usize>) -> usize {
    blink(50, prev)
}

fn blink(count: usize, number_counts: &mut HashMap<usize, usize>) -> usize {
    for _ in 0..count {
        let mut tmp: HashMap<usize, usize> = HashMap::new();
        for (k, v) in &mut *number_counts {
            if *k == 0 {
                tmp.entry(1)
                    .and_modify(|ones| *ones += *v)
                    .or_insert(*v);
            } else if let Some((left, right)) = split_if_even(*k) {
                tmp.entry(left)
                    .and_modify(|val| *val += *v)
                    .or_insert(*v);
                tmp.entry(right)
                    .and_modify(|val| *val += *v)
                    .or_insert(*v);
            } else {
                tmp.entry(k * 2024)
                    .and_modify(|val| *val += *v)
                    .or_insert(*v);
            }
        }
        mem::swap(number_counts, &mut tmp);
    }
    number_counts.values().sum()
}
