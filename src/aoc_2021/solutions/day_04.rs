use std::collections::HashSet;

use crate::utils;
use itertools::{IntoChunks, Itertools};
use proctor::timed;

type BingoBoard = Vec<(u8, bool)>;

// Stub generated by Elf
pub fn solve() {
    let lines = utils::file_to_lines("2021", "04");
    part_one(&lines);
    part_two(&lines);
}

#[timed]
fn part_one(lines: &[String]) -> usize {
    let (pull_order, mut boards) = parse_boards(&lines);
    for num in pull_order {
        for board in boards.iter_mut() {
            if mark_board(board, num) {
                return calc_score(board, num as usize);
            }
        }
    }
    0
}

#[timed]
fn part_two(lines: &[String]) -> usize {
    let (pull_order, mut boards) = parse_boards(&lines);
    let mut won = HashSet::new();
    for num in pull_order {
        let num_boards = boards.len();
        for idx in 0..num_boards {
            if !won.contains(&idx) && mark_board(&mut boards[idx], num) {
                won.insert(idx);
                if won.len() == num_boards {
                    return calc_score(&mut boards[idx], num as usize);
                };
            }
        }
    }
    0
}

fn parse_boards(lines: &[String]) -> (Vec<u8>, Vec<BingoBoard>) {
    let order = lines[0]
        .split(",")
        .map(|num| num.parse::<u8>().unwrap())
        .collect();

    let mut boards = vec![vec![]; 100];

    lines[2..]
        .iter()
        .filter(|line| !line.is_empty())
        .enumerate()
        .for_each(|(idx, line)| {
            line.split_whitespace().for_each(|num| {
                boards[idx / 5].push((num.parse::<u8>().unwrap(), false));
            });
        });

    (order, boards)
}

fn mark_board(board: &mut BingoBoard, num: u8) -> bool {
    for field in 0..board.len() {
        if board[field].0 == num {
            board[field].1 = true;
            for y in 0..5 {
                if (0..5).all(|x| board[y * 5 + x].1) || (0..5).all(|x| board[x * 5 + y].1) { return true };
            }
        }
    }
    false
}

fn calc_score(board: &BingoBoard, winning_num: usize) -> usize {
    board
        .iter()
        .fold(0usize, |acc, v| if !v.1 { acc + v.0 as usize } else { acc })
        * winning_num
}
