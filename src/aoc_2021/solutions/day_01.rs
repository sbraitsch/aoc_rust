use itertools::Itertools;

use crate::utils;
use std::time::Instant;

// Stub generated by templar
pub fn solve() {
    let lines = utils::file_to_lines("2021", "01");
    let mut time = Instant::now();
    println!("Part 1: {:?} in {:?}", part_one(&lines), time.elapsed());
    time = Instant::now();
    println!("Part 2: {:?} in {:?}", part_two(&lines), time.elapsed());
}

fn part_one(lines: &[String]) -> usize {
    lines
        .iter()
        .map(|line| line.parse::<i32>().unwrap())
        .tuple_windows()
        .filter(|(a, b)| b > a)
        .count()
}
fn part_two(lines: &[String]) -> usize {
    let nums: Vec<i32> = lines.iter().map(|l| l.parse::<i32>().unwrap()).collect();
    let mut count = 0;
    for i in 0..(nums.len() - 3) {
        if (nums[i] + nums[i + 1] + nums[i + 2]) < (nums[i + 1] + nums[i + 2] + nums[i + 3]) {
            count += 1;
        }
    }
    count
}
